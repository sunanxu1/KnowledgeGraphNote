  众里寻他千百度，那人却在灯火阑珊处。
  考研吗？一定要考上985（暂定中大了，看以后情况可以修改，不过不用纠结太多）。先说最差的结果，考不上，然后为了找工作，短时间内做出一个普通的系统，然后去小型公司应聘。学历是一个很实际的敲门砖，不是说学历歧视之类的，而是有些岗位确实是需要通过系统训练过你才能胜任，公司的人事可以慢慢适应学习，但技术和能力就摆在那里。当然，我也不是说不考研就找不到好工作，只是我想做的知识图谱需要理论知识支撑罢了。就算考不上，我也会在工作之余去学习的。
  做知识图谱的想法并不是一蹴而就的，高中就为了整理背诵知识点用过思维导图，对思维导图也有些许理念。一路走来，Google搜索也给了我莫大的鼓舞，有问题上Google，而它背后是知识图谱KG的支撑。而当我检索高考相关信息的同时，要么是时效性差，要么是回答模糊、答非所问，根本无法做到有效地提取信息。还有就是联想记忆，比如背单词，相关性的东西越多，你的记忆就越深刻，因为有了神经的连接。知识图谱本身也是交叉学科，除了计算机知识外，你还需要用到信息学、语言学等多领域的知识，而这些领域我不无兴趣。
  如果说知识图谱有什么应用，那可以回到NPL能做什么应用，而我想做的是推荐，不论是商品推荐，还是音乐推荐，而NPL是AI的一个分支，所以我的方向便是人工智能。而语言选型当然少不了Python/C++。
  先说工作以后的情况，如果行有余力，想要给自己一个tag，那么还是多做知识图谱这块的积累吧，作为一个programmer，是为解决问题而生的，而你也应该有自己想要的方向，一个让你感兴趣的，让你觉得有价值的，也让你有所触动的领域。即便考不上研，你也可以在工作中努力，这是你向开源世界做出贡献的绝佳途径。不要成为一个只有眼前生活的工作族，而是一个心有挂念的geeker。
   最后是学习的方式，昨天看的ted说学习一个新技能只要练习20小时，我觉得想法是可行的。你不是为了成为某个领域的顶级专家，所以你不需要刻意练习一万个小时。学习某个技能，你可以拆解出某个模块，再把模块需要的东西学会，然后你就可以开始练习，直到你可以找出问题自我纠错了，你就可以继续拆解下一个模块，而这需要你练习20个小时。




